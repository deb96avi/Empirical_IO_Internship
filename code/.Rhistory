knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(readxl)
library(readr)
commune <- read_excel("UU2010_au_01-01-2020.xlsx",sheet = "Composition_communale", skip = 5)
path
getwd()
list.files(".")
list.files("..")
list.files("...")
library(here)
here()
pwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(readxl)
library(readr)
library(rje)
library(geosphere)
library(plotly)
setwd('../')
x=getwd()
commune <- read_excel("input/UU2010_au_01-01-2020.xlsx",sheet = "Composition_communale", skip = 5)
commune_pop <- read_excel("input/ensemble.xls", sheet = "Communes", skip = 7)
commune_location <- read_csv("input/communes-departement-region.csv",
col_types = cols(code_commune_INSEE = col_character(), code_departement = col_character()))
attraction_city <- read_excel("input/attraction_city.xlsx", skip = 2)
etablissements <- read_csv("input/etablissements.csv")
optique_networks <- read_excel("docs/optiques_100_centres_modified.xlsx")
#remove communes outside mainland France
commune_location<-commune_location%>%filter(code_commune_INSEE<97101)
commune_location<-filter(commune_location, !grepl('A|B', code_commune_INSEE))
commune_pop<-commune_pop%>%filter(`Code département`<=95)
#Renaming columns. Look at insee documentation file to know more about columns in siret dataset
commune_pop<-commune_pop %>%
rename(
code_region=`Code région`,
name_region=`Nom de la région`,
code_department=`Code département`,
code_commune_geo=`Code commune`,
name_commune=`Nom de la commune`	,
population_commune=`Population totale`
)
commune_pop=subset(commune_pop,select=c(code_region,
name_region,
code_department,
code_commune_geo,
name_commune,
population_commune))
commune_location<-commune_location %>%
rename(
code_commune_geo=code_commune_INSEE
)
commune_location=subset(commune_location,select=c(code_commune_geo,latitude,longitude))
attraction_city<-attraction_city %>%
rename(
code_commune_geo=`Code géographique de la commune`,
name_commune_src_attr=`Libellé géographique de la commune`,
code_attraction_centre=	`Code géographique de l'aire d'attraction des villes 2020`,
name_attraction_centre	= `Libellé géographique de l'aire d'attraction des villes 2020`,
category_attraction_centre= `Catégorie de la commune dans le zonage en aires d'attraction des villes 2020`
)
attraction_city=subset(attraction_city,select=c(code_commune_geo,
name_commune_src_attr,
code_attraction_centre,
name_attraction_centre,
category_attraction_centre
))
etablissements$shop_address_1 <- paste(etablissements$numeroVoieEtablissement,etablissements$indiceRepetitionEtablissement,etablissements$typeVoieEtablissement,etablissements$libelleVoieEtablissement,etablissements$codePostalEtablissement)
etablissements$shop_address_2 <- paste(etablissements$numeroVoie2Etablissement,etablissements$indiceRepetition2Etablissement,etablissements$typeVoie2Etablissement,etablissements$libelleVoie2Etablissement,etablissements$codePostal2Etablissement)
etablissements<-etablissements %>%
rename(
date_creation =	dateCreationEtablissement
, year_workforce_record_update	= anneeEffectifsEtablissement
, date_latest_update	= dateDernierTraitementEtablissement
, headquarter		= etablissementSiege
, date_creation_legal_unit	= dateCreationUniteLegale
, category	= categorieJuridiqueUniteLegale
,	legal_shop_name = denominationUniteLegale
, acronym_shop=	sigleUniteLegale
, popular_name_1	= denominationUsuelle1UniteLegale
, popular_name_2	= denominationUsuelle2UniteLegale
, popular_name_3	= denominationUsuelle3UniteLegale
, owner_gender = sexeUniteLegale
, owner_lastname	= nomUniteLegale
, owner_lastname_chosen	= nomUsageUniteLegale
, owner_firstname_1	= prenom1UniteLegale
, owner_firstname_2	= prenom2UniteLegale
, owner_firstname_3	= prenom3UniteLegale
, owner_firstname_4	= prenom4UniteLegale
, owner_firstname_used	= prenomUsuelUniteLegale
, owner_pseudonym	= pseudonymeUniteLegale
, apen_code	= activitePrincipaleUniteLegale
,rna_registration_code = identifiantAssociationUniteLegale
, social_category =	economieSocialeSolidaireUniteLegale
, workforce_category = trancheEffectifsUniteLegale
, year_workforce_survey	= anneeEffectifsUniteLegale
, nic_centralized	= nicSiegeUniteLegale
, date_sirene_last_update	= dateDernierTraitementUniteLegale
, category_business	= categorieEntreprise
, year_category_survey = anneeCategorieEntreprise
, shop_address_complement_1	= complementAdresseEtablissement
, name_commune_src_etab=	libelleCommuneEtablissement
, code_commune_geo=		codeCommuneEtablissement
, shop_address_complement_2	= complementAdresse2Etablissement
, franchise_1	= enseigne1Etablissement
, franchise_2	= enseigne2Etablissement
, franchise_3	= enseigne3Etablissement
, shop_name_public= denominationUsuelleEtablissement
)
etablissements=subset(etablissements,select=c(  siren
,nic
,siret
,date_creation
, year_workforce_record_update
, date_latest_update
, headquarter
, date_creation_legal_unit
, category
,	legal_shop_name
, acronym_shop
, popular_name_1
, popular_name_2
, popular_name_3
, owner_gender
, owner_lastname
, owner_lastname_chosen
, owner_firstname_1
, owner_firstname_2
, owner_firstname_3
, owner_firstname_4
, owner_firstname_used
, owner_pseudonym
, apen_code
,rna_registration_code
, social_category
, workforce_category
, year_workforce_survey
, nic_centralized
, date_sirene_last_update
, category_business
, year_category_survey
, shop_address_complement_1
, name_commune_src_etab
, code_commune_geo
, shop_address_complement_2
, franchise_1
, franchise_2
, franchise_3
, shop_name_public
, shop_address_1
, shop_address_2))
etablissements$shop_address_1<- gsub('NA', '', etablissements$shop_address_1)
etablissements$shop_address_1<- gsub('  ', ' ', etablissements$shop_address_1)
etablissements$shop_address_2<- gsub('NA', '', etablissements$shop_address_2)
etablissements$shop_address_2<- gsub('  ', ' ', etablissements$shop_address_2)
commune_location$Name_length = str_length(commune_location$code_commune_geo)
commune_location<-commune_location%>%mutate(code_commune_geo=ifelse(Name_length == 4, paste0("0",commune_location$code_commune_geo),commune_location$code_commune_geo))
commune_location=subset(commune_location,select=c(code_commune_geo,latitude,longitude))
commune_location <- unique( commune_location )
commune_pop$code_new = paste0(commune_pop$"code_department",commune_pop$"code_commune_geo")
#commune_pop_loc<-merge(x = commune_pop, y = commune_location, by.x = "code_new",by.y="code_commune_geo", all.x = TRUE)
#commune_pop_loc<-commune_pop_loc %>% filter(!is.na(latitude))
#commune_pop_loc=subset(commune_pop_loc,select=-c(code_commune_geo))
#New aires d'attractions:
attraction_city$Name_length = str_length(attraction_city$"code_commune_geo")
attraction_city<-attraction_city%>%mutate("code_commune_geo"=ifelse(Name_length == 4, paste0("0",attraction_city$"code_commune_geo"),attraction_city$"code_commune_geo"))
attraction_city=subset(attraction_city,select=-c(Name_length))
#remove communes outside mainland France
attraction_city<-attraction_city%>%filter(!(is.na(code_commune_geo)))
attraction_city<-attraction_city%>%filter(code_commune_geo<97101)
# Grouping Paris, Lyon and Marseille Arrodisement values in location and population tables
test<-filter(commune_pop, (code_new>=75101 & code_new<=75120) | (code_new>=13201 & code_new<=13216))
commune_pop<-filter(commune_pop, !((code_new>=75101 & code_new<=75120) | (code_new>=13201 & code_new<=13216)))
test<-test%>%select(code_region,population_commune)%>%group_by(code_region)%>%summarise(population_commune=mean(population_commune))
commune_pop[nrow(commune_pop) + 1,] = list('11', 'Île-de-France', '75','056','Paris',(test%>%filter(code_region==11))[['population_commune']],'75056')
commune_pop[nrow(commune_pop) + 1,] = list('93', "Provence-Alpes-Côte d'Azur", '13','055','Marseille ',(test%>%filter(code_region==93))[['population_commune']],'13055')
test<-filter(commune_location, (code_commune_geo>=75101 & code_commune_geo<=75120) | (code_commune_geo>=13201 & code_commune_geo<=13216))
commune_location<-filter(commune_location, !((code_commune_geo>=75101 & code_commune_geo<=75120) | (code_commune_geo>=13201 & code_commune_geo<=13216)))
test["code_commune_geo"]<-ifelse((test["code_commune_geo"]>=75101) & (test["code_commune_geo"]<=75120), 75056,13055)
test<-test%>%group_by(code_commune_geo)%>%summarise(latitude=mean(latitude),longitude=mean(longitude))
commune_location[nrow(commune_location) + 1,] = list('75056', (test%>%filter(code_commune_geo==75056))[['latitude']],(test%>%filter(code_commune_geo==75056))[['longitude']])
commune_location[nrow(commune_location) + 1,] = list('13055', (test%>%filter(code_commune_geo==13055))[['latitude']],(test%>%filter(code_commune_geo==13055))[['longitude']])
#
test<-filter(commune_pop, code_new>=69381 & code_new<=69389)
commune_pop<-filter(commune_pop, !(code_new>=69381 & code_new<=69389))
test<-test%>%select(code_region,population_commune)%>%group_by(code_region)%>%summarise(population_commune=mean(population_commune))
commune_pop[nrow(commune_pop) + 1,] = list('84', 'Auvergne-Rhône-Alpes
', '69','123','Lyon',test[['population_commune']],'69123')
test<-filter(commune_location, code_commune_geo>=69381 & code_commune_geo<=69389)
commune_location<-filter(commune_location, !(code_commune_geo>=69381 & code_commune_geo<=69389))
test["code_commune_geo"]<-69123
test<-test%>%group_by(code_commune_geo)%>%summarise(latitude=mean(latitude),longitude=mean(longitude))
commune_location[nrow(commune_location) + 1,] = list('69123', test[['latitude']],test[['longitude']])
#Merging commune population and location tables
commune_attr_pop<-merge(x = attraction_city, y = commune_pop, by.x="code_commune_geo",by.y="code_new", all.x = TRUE)
commune_merge<-merge(x = commune_attr_pop, y = commune_location, by="code_commune_geo", all.x = TRUE)
#merging with siret dataset to get optique store level information
commune_merge_shop<-merge(x = commune_merge, y = etablissements, by="code_commune_geo", all.x = TRUE)
#merge check
commune_post_merge=commune_merge[['code_commune_geo']]
missing_df<-filter(attraction_city,!(code_commune_geo %in% commune_post_merge))
test<-commune_merge%>%filter(is.na(latitude))
test2<-commune_merge%>%filter(is.na(population_commune))
#Preliminary geographical plots
#p<-ggplot(commune_merge,aes(x=longitude,y=latitude,group=name_attraction_centre))+geom_polygon(aes(fill=population_commune))
#ggplot(commune_merge,aes(x=longitude,y=latitude,group=name_attraction_centre))+geom_polygon(aes(colour=population_commune))
p<-ggplot(commune_merge,aes(x=longitude,y=latitude,group=name_attraction_centre))+geom_point(aes(shape=".",colour=population_commune))+borders(regions="france", name="borders")+scale_colour_gradient(low = "yellow", high = "red", na.value = NA)
ggplotly(p)
#Merge to get top 200 least populated attraction units
commune_merge2=subset(commune_merge,select=c(code_attraction_centre,population_commune))
commune_merge3<-aggregate(commune_merge2$population_commune,by=list(attraction_code=commune_merge2$`code_attraction_centre`),FUN=sum)
commune_merge3=arrange(commune_merge3,x)
commune_top_100<-head(commune_merge3,200)
x=commune_top_100$attraction_code
shop_top_communes<-subset(commune_merge_shop, `code_attraction_centre` %in% x)
commune_merge4<-merge(x = shop_top_communes, y = commune_merge3, by.x = "code_attraction_centre",by.y="attraction_code", all.x = TRUE)
commune_merge4<-commune_merge4 %>%  rename(population_attr_centre=x)
y<-arrange(commune_merge4,population_attr_centre)
test4<-y%>%filter(is.na(siren))
#write.csv(y,"optiques_200_centres.csv", row.names = TRUE)
View(test4)
p<-ggplot(y,aes(x=longitude,y=latitude,group=name_attraction_centre))+geom_point(aes(shape=".",colour=population_commune))+borders(regions="france", name="borders")+scale_colour_gradient(low = "yellow", high = "red", na.value = NA)
ggplotly(p)
p<-ggplot(y,aes(x=longitude,y=latitude,group=name_attraction_centre))+geom_polygon(aes(fill=population_attr_centre))+borders(regions="france", name="borders")+scale_fill_gradient(low = "yellow", high = "red", na.value = NA)
ggplotly(p)
View(y)
View(test4)
View(y)
